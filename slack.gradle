/*
 * Copyright (c) 2020.
 * Nikita Knyazievsky
 * Triare
 */

import com.google.gson.Gson

buildscript {
    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
    }
}

apply plugin: Slack

class Requester {
    void send(String message, String webHooks) {
        URL url
        HttpURLConnection connection = null
        // Create connection
        url = new URL(webHooks)
        connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod('POST')
        connection.setConnectTimeout(5000)
        connection.setUseCaches(false)
        connection.setDoInput(true)
        connection.setDoOutput(true)

        System.out.println(message)

        String payload = 'payload=' + URLEncoder.encode(message, 'UTF-8')

        // Send request
        DataOutputStream wr = new DataOutputStream(
                connection.getOutputStream())
        wr.writeBytes(payload)
        wr.flush()
        wr.close()

        // Get Response
        InputStream is = connection.getInputStream()
        BufferedReader rd = new BufferedReader(new InputStreamReader(is))
        String line
        StringBuffer response = new StringBuffer()
        while ((line = rd.readLine()) != null) {
            response.append(line)
            response.append('\r')
        }

        System.out.println(response.toString())
        rd.close()

        if (connection != null) {
            connection.disconnect()
        }
    }
}

class SlackPluginExtension {
    String webHooks
    String text
    String userName
    String versionName
    String versionCode
    String releaseNotes
    String task
    String testerGroupName
    String developer
}

class SlackTxt {
    private String type

    private String text

    SlackTxt(String type, String text) {
        this.type = type
        this.text = text
    }

    void setText(String text) {
        this.text = text
    }

    String getType() {
        return type
    }
}

class SlackBlock {
    private String type

    private SlackTxt text

    private List<SlackTxt> fields

    SlackBlock(String type) {
        this.type = type
    }

    void addField(SlackTxt slackTxt) {
        if (fields == null) {
            fields = new ArrayList<>()
        }
        fields.add(slackTxt)
    }

    List<SlackTxt> getFields() {
        return fields
    }

    String getType() {
        return type
    }

    SlackTxt getText() {
        return text
    }

    void setText(SlackTxt text) {
        this.text = text
    }
}

class SlackMsg {
    private List<SlackBlock> blocks

    List<SlackBlock> getBlocks() {
        return blocks
    }

    void setBlocks(List<SlackBlock> blocks) {
        this.blocks = blocks
    }
}

class Slack implements Plugin<Project> {

    SlackPluginExtension extension

    @Override
    void apply(Project target) {
        extension = target.extensions.create('slack', SlackPluginExtension)
        /*target.afterEvaluate {
            System.out.println("afterEvaluate extension.text " + target.extensions.slack.text)
        }*/
        target.task('sendSlack') {
            doLast {
                System.out.println("extension.text " + target.extensions.slack.text)
                new Requester().send(getMsg(extension), extension.webHooks)
            }
        }

    }

    private String getMsg(SlackPluginExtension extension) {

        def txtType = "mrkdwn"

        def msg = new SlackMsg()

        def blocks = new ArrayList<SlackBlock>()

        def titleBlock = new SlackBlock('section')
        titleBlock.setText(new SlackTxt(txtType, extension.text))

        blocks.add(titleBlock)

        def slackFields = new SlackBlock('section')
        slackFields.addField(new SlackTxt(txtType, "*Release Notes:*\n" + extension.releaseNotes))
        slackFields.addField(new SlackTxt(txtType, "*Version:*\n" + extension.versionName))
        slackFields.addField(new SlackTxt(txtType, "*Task:*\n" + extension.task))
        //slackFields.addField(new SlackTxt(txtType, "*Last commit:*\n" + "git log -1 --pretty=%B".execute().text.trim()))
        slackFields.addField(new SlackTxt(txtType, "*Last commit:*\n" + "User clinic flow"))
        slackFields.addField(new SlackTxt(txtType, "*Tester group:*\n" + extension.testerGroupName))
        slackFields.addField(new SlackTxt(txtType, "*Developer:*\n" + extension.developer))

        blocks.add(slackFields)

        msg.setBlocks(blocks)

        return new Gson().toJson(msg)

    }

}